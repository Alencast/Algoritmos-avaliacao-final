# Respostas questão 1:

(a) Descreva uma solução usando o método guloso.

Uma solução usando o método guloso para o problema do troco funciona da seguinte forma:

Para resolver o problema do troco usando o método guloso, o primeiro passo é ordenar as moedas em ordem decrescente, já que devemos sempre escolher a maior moeda possível primeiro.
Se as moedas não estiverem organizadas, precisamos ordená-las antes de começar. Depois, para cada moeda, pegamos a maior quantidade possível sem ultrapassar o valor do troco. Subtraímos o valor correspondente e repetimos esse processo até que o valor do troco seja alcançado.



(b) Descreva situações em que o método guloso deve ser aplicado e situações em que o método guloso não resolve
o problema do troco.

O método guloso funciona bem quando escolher a maior moeda possível sempre leva a melhor solução. Por exemplo, com as moedas 5, 2 e 1, se o troco for 7, o guloso escolheria 5 + 2, usando 2 moedas, que é a melhor solução.
Por outro lado, o método guloso não funciona bem quando iniciar pela maior moeda não leva a melhor solução. Com as moedas 5, 4, 3 e 1, se o troco for 7, o guloso escolheria 5 + 1 + 1 (usando 3 moedas), mas a melhor solução seria 4 + 3 (usando 2 moedas). Esse exemplo mostra que a escolha da maior moeda nem sempre resulta na solução ideal.



(d) Descreva uma solução para o problema do troco em moedas usando programação dinâmica.

A ideia consiste em usar a  abordagem bottom-up, criando uma tabela onde cada posição representa a menor quantidade de moedas necessárias para formar um determinado troco usando um subconjunto das moedas disponíveis no problema, dessa forma os valores serão salvos e armazenados para que possam ser utilizados sem a necessidade de fazer o cálculo novamente, otimizando a solução. Para isso, definimos uma matriz dp  (n+10) x (V+1) (+10 para ter margem de erro), onde n é o número de moedas e V é o valor do troco desejado. Cada endereço em dp[i][j] guarda menor número de moedas necessárias para formar o valor j usando as primeiras i moedas. Todas as posições da tabela são inicialmente preenchidas com um valor alto(simulando o "infinito"), menos a primeira coluna, já que para formar o valor 0 não precisamos de nenhuma moeda.Então, dp[i][0] é 0 para qualquer i. Na linha 0 (quando não temos moedas) e para j > 0, dp[0][j] continua com "infinito", porque não dá pra formar nenhum troco sem moedas. Depois iteramos a tabela para preencher: para cada moeda i e para cada valor j de 1 até V, temos duas opções... ou não usamos a moeda atual e copiamos o valor dp[i-1][j], ou usamos a moeda atual (se ela for menor ou igual a j) e atualizamos dp[i][j] para 1 + dp[i][j - valorDaMoeda]. No fim, o resultado ficará armazenado em dp[n][V]: se esse valor ainda for "infinito", significa que não dá para formar o troco, caso contrário, ele mostra o número mínimo de moedas necessárias.
